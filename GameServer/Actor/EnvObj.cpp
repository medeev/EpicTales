
#include "Pch.h"
#include "EnvObj.h"

#include <Data/Info/WorldInfo.h>
#include <Data/WorldEntityData/WorldEntityData.h>
#include <Protocol/Struct/PktEnvObj.h>
#include <Protocol/Struct/PktRoom.h>

#include "Logic/WorldEntity/EnvObjSpawner.h"
#include "Room/Room.h"
#include "Room/World.h"
#include "Util/IdFactory.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
EnvObj::EnvObj(const EnvObjInfo& info)
	:
	super(EActorType::EnvObj),
	_info(info),
	_spawnInfo(nullptr),
	_lifeTime(0),
	_remainCtrlCount(0),
	_nextChargeTime(0),
	_envObjState(EEnvObjStateType::Max)
{
	setId(Core::IdFactory::CreateId());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		초기화 한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::initialize()
{
	super::initialize();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		정보를 내보낸다
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::exportTo(PktSightEnterNotify& dest) const
{
	PktEnvObjInfo pktInfo;
	exportTo(pktInfo);
	dest.getEnvObjs().emplace_back(std::move(pktInfo));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		정보를 내보낸다
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::exportTo(PktEnvObjInfo& dest) const
{
	dest.setId(getId());
	dest.setInfoId(getInfoId());

	exportTo(dest.getStateInfo());

	dest.setLocation(getLocation());
	dest.setYaw((uint16_t)getDirection().toOrientationRotator().getYaw());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		정보를 내보낸다
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::exportTo(PktEnvObjState& dest) const
{
	dest.setState(getEnvObjState());
	dest.setRemainCount(getRemainCtrlCount());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief  스포너를 설정한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::setSpawner(EnvObjSpawnerPtr spawner)
{
	if (!spawner)
		return;

	_spawnerWeak = spawner;
	_spawnInfo = &spawner->getInfo();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	갱신한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::update(int64_t curTime)
{
	super::update(curTime);

	if (_lifeTime && _lifeTime < curTime)
	{
		_lifeTime = 0;

		_fsmComponent.changeState(EFsmStateType::EnvObjStateDespawn);
	}

	if (_spawnInfo && _spawnInfo->getChargeTime())
	{
		if (_nextChargeTime && _nextChargeTime < curTime)
		{
			_nextChargeTime = curTime + _spawnInfo->getChargeTime();
			if (isUnLimitedCtrl() || !isFullControlCount())
			{
				setRemainCtrlCount(getRemainCtrlCount() + 1);

				PktEnvObjStateNotify notify;
				notify.setId(getId());
				notify.setStateInfo(PktEnvObjState(getEnvObjState(), getRemainCtrlCount()));

				if (auto room = getRoom())
					room->sendToNear(*this, notify);
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	가젯컨트롤 횟수 다 찼는지 여부
////////////////////////////////////////////////////////////////////////////////////////////////////
bool EnvObj::isFullControlCount() const
{
	return _spawnInfo->getControlCount() <= (int32_t)_remainCtrlCount;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	환경오브젝트 컨트롤 소진후 제거되는지 여부
////////////////////////////////////////////////////////////////////////////////////////////////////
bool EnvObj::isRemainEmtpyRemove() const
{
	if (!_spawnInfo)
		return false;

	return _spawnInfo->isRemoveEmpty();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	컨트롤 무제한여부
////////////////////////////////////////////////////////////////////////////////////////////////////
bool EnvObj::isUnLimitedCtrl() const
{
	if (!_spawnInfo)
		return false;

	return _spawnInfo->getControlCount() == 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	컨트롤 중인 액터에 대해서 수행한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::forEachControls(std::function<void(ActorPtr&)> func)
{
	ControlsMap copyControls = _controls;

	for (auto iter = copyControls.begin(); iter != copyControls.end(); )
	{
		auto actorWeak = iter->second;
		if (auto actorPtr = actorWeak.lock())
		{
			if (actorPtr->getRoom() != getRoom())
				iter = _controls.erase(iter);
			else
			{
				func(actorPtr);
				++iter;
			}
		}
		else
		{
			iter = _controls.erase(iter);
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief  방에서 삭제된다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::endPlayPost()
{
	ENSURE(!getRoom(), return);

	if (auto spawnner = getSpawner())
		spawnner->removeSpawnTimer(*this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	컨트롤중인 액터를 추가한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::addControl(ActorPtr actor)
{
	if (!actor)
		return;

	_controls.insert(std::make_pair(actor->getId(), actor));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	컨트롤중인 액터를 제거한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::removeControl(ActorPtr actor)
{
	if (!actor)
		return;

	_controls.erase(actor->getId());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	남은 횟수를 설정한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::setRemainCtrlCount(uint32_t count)
{
	auto room = getRoom();
	if (!room)
		return;

	_remainCtrlCount = count;

	if (_spawnInfo && _spawnInfo->getChargeTime())
	{
		if (isFullControlCount())
		{
			_nextChargeTime = 0;
		}
		else
		{
			_nextChargeTime = room->getTime();
			_nextChargeTime += _spawnInfo->getChargeTime();
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief  월드에 진입한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObj::enterWorld(World& world)
{
	world.addActor(shared_from_this());

	_fsmComponent.changeState(EFsmStateType::EnvObjStateSpawn);

	updateSight(nullptr, true);
}
