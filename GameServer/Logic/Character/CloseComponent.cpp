

#include "Pch.h"
#include "CloseComponent.h"

#include "Logic/PlayerManager.h"
#include "User/User.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
CloseComponent::CloseComponent( Player& player )
	:
	super(EComponentType::Close, player, EComponentUpdate::kYes), _player(player), _closedTimeSec(0), _clsoedUserId(0)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////
CloseComponent::~CloseComponent()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		초기화한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void CloseComponent::initialize()
{
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		정리한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void CloseComponent::finalize()
{
	if (_clsoedUserId)
	{
		PlayerCloseManager::Instance().remove(_clsoedUserId);
		_clsoedUserId = 0;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  업데이트한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void CloseComponent::update(int64_t curTime)
{
	if (_closedTimeSec && _closedTimeSec + (kCloseClearCheckSec) < (curTime / 1000))
	{
		_player.setRoomRemovable(true);

		PlayerManager::Instance().remove(_player.getId());
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  유저소유권이 없어질때 처리한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void CloseComponent::unPossess(const User& user)
{
	_clsoedUserId = user.getId();

	PlayerCloseManager::Instance().insert(_clsoedUserId, _player.shared_from_this<Player>());

	_closedTimeSec = Core::Time::GetCurTimeSec();
}



////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  유저소유권이 생길대 처리한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void CloseComponent::possess()
{
	if (_clsoedUserId)
	{
		PlayerCloseManager::Instance().remove(_clsoedUserId);
		_clsoedUserId = 0;
	}

	_closedTimeSec = 0; _closedTimeSec = 0;
}
