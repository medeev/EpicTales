

#include "Pch.h"
#include "NpcStateBase.h"

#include <Data/Info/NpcInfo.h>

#include "Actor/Npc.h"
#include "Logic/NpcAi/NpcAiComponent.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
NpcStateBase::NpcStateBase(FsmComponent& fsm, Npc& npc, EFsmStateType type)
	:
	super(fsm, npc, type),
	_npc(npc),
	_lookTimeInterval(0),
	_nextlookTime(0)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	업데이트 가능한지 여부를 반환한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
bool NpcStateBase::_isLookTime(int64_t curTimeValue) const
{
	if (_nextlookTime == 0 || _nextlookTime < curTimeValue)
		return true;

	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	다음 업데이트시간을 설정한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void NpcStateBase::_setNextLookTime(int64_t curtTimeValue)
{
	_nextlookTime = curtTimeValue + _lookTimeInterval;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  진입이후 처리한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void NpcStateBase::onEnterPost()
{
}


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  테스크 결과를 반환한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void NpcStateBase::_setTaskLatentResult(EBTNodeResult result)
{
	_npc.getNpcAiComponent().setTaskLatentResult(result);
}
