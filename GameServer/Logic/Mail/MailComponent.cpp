

#include "Pch.h"
#include "MailComponent.h"

#include <Protocol/Struct/PktMail.h>

#include "Actor/ActorFactory.h"
#include "Actor/Player.h"
#include "Room/World.h"
#include "OrmSub/Mail.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
MailComponent::MailComponent( Player& player )
	:
	super(EComponentType::Mail, player),
	_player( player )
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////
MailComponent::~MailComponent()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief  메일을 추가한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void MailComponent::insertMail(MailPtr mail)
{
	if (!mail)
		return;

	_mails.insert(std::make_pair(mail->getId(), mail));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief  메일을 내보낸다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void MailComponent::exportTo(std::vector<PktMail>& outMails) const
{
	for (auto mail : _mails | std::views::values)
	{
		PktMail pktMail;
		mail->exportTo(pktMail);

		outMails.emplace_back(std::move(pktMail));
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		초기화한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void MailComponent::initialize()
{
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		정리한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void MailComponent::finalize()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	DB객체로 초기화한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
bool MailComponent::initializeDB(const DataBaseTarget& db)
{
	auto ormMails = DBOrm::Mail::SelectListByOwnerId(
		db, _player.getId());
	for (auto ormMail : ormMails)
	{
		auto mail = std::make_shared<Mail>();
		ormMail->copyMember(*mail);

		_mails.insert(std::make_pair(mail->getId(), mail));
	}

	return true;
}
