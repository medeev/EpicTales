


#include "Pch.h"
#include "Party.h"

#include <Core/Task/TaskManager.h>
#include <Core/Thread/ThreadChecker.h>
#include <Core/Util/IdFactory.h>

#include "PartyManager.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
Party::Party(PartyManager& thread) 
	: _partyManager(thread), _delta(0), _time(0), _removable(false)
{
	_id = Core::IdFactory::CreateId();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  업데이트 한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void Party::update()
{
	if (getPlayerCount() == 0)
		setRemoveable(true);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  플레이어 수를 반환한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
int32_t Party::getPlayerCount() const
{
	return (int32_t)_players.size();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	옥션에서 작업을 한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void Party::runTask(const Core::TaskCaller& taskCaller, const Core::TaskManager::Task& task)
{
	_partyManager.runTask(taskCaller, task);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief 스레드가 올바른지 체크한다
////////////////////////////////////////////////////////////////////////////////////////////////////
bool Party::checkThread() const
{
	if (_partyManager.isRunning())
	{
		return Core::ThreadChecker::Check(
			_partyManager.getId(),
			"Party, id: %llu",
			_id);
	}

	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  순회하면서 처리한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void Party::foreachPlayer(std::function<void(PlayerPtr)> func)
{
	for (const auto& playerWeak : _players | std::views::values)
	{
		auto player = playerWeak.lock();
		if (!player)
			continue;

		if (func)
			func(player);
	}
}

