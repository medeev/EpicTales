

#include "Pch.h"
#include "SkillComponent.h"

#include <Data/Info/SkillInfo.h>
#include <DB/Orms/OrmSkill.h>

#include "Actor/Player.h"
#include "Room/World.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
SkillComponent::SkillComponent(Actor& actor)
	:
	IComponent(EComponentType::Skill, actor),
	_actor(actor)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////
SkillComponent::~SkillComponent()
{

}


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		초기화한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void SkillComponent::initialize()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		정리한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void SkillComponent::finalize()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	DB객체로 초기화한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
bool SkillComponent::initializeDB(const DataBaseTarget& conn)
{
	auto player = _actor.shared_from_this<Player>();
	ENSURE(player, return false);

	auto orms = DBOrm::Skill::SelectListByOwnerId(
		conn, player->getId());

	_initByList(orms);

	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief  스킬을 추가한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void SkillComponent::insertSkill(SkillPtr skill)
{
	if (!skill)
		return;

	auto ret = _skills.insert(std::make_pair(skill->getInfoId(), skill));
	if (!ret.second)
	{
		WARN_LOG("skillInfoId is duplcated. [ownerId:%llu, skillInfoId:%u]", 
			skill->getOwnerId(), skill->getInfoId());
		return;
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief  스킬을 찾는다.
////////////////////////////////////////////////////////////////////////////////////////////////////
const SkillPtr SkillComponent::findSkill(PktInfoId infoId) const
{
	auto iter = _skills.find(infoId);
	if (iter == _skills.end())
		return nullptr;

	return iter->second;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief  스킬을 찾는다.
////////////////////////////////////////////////////////////////////////////////////////////////////
SkillPtr SkillComponent::findSkill(PktInfoId infoId)
{
	return std::const_pointer_cast<Skill>(static_cast<const SkillComponent&>(*this).findSkill(infoId));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief  스킬을 DB에 추가한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void SkillComponent::insertSkill(CacheTx& cacheTx, PktInfoId infoId) const
{
	auto player = _actor.shared_from_this<Player>();
	ENSURE(player, return);

	SkillInfoPtr skillInfo(infoId);
	ENSURE(skillInfo, return);

	auto iter =_skills.find(infoId);
	if (iter != _skills.end())
	{
		WARN_LOG("skillInfoId is duplcated. [playerId:%llu, skillInfoId:%u]",
			player->getId(), infoId);
		return;
	}

	auto newSkill = std::make_shared<Skill>(*skillInfo);
	newSkill->setOwnerId(player->getId());
	newSkill->setInfoId(infoId);
	auto cacheItem = cacheTx.acquireObject(*player, newSkill);
	cacheItem->insertCache();
}



bool SkillComponent::_initByList(const std::list<std::shared_ptr<DBOrm::Skill>>& orms)
{
	for (auto orm : orms)
	{
		auto infoId = orm->getInfoId();
		SkillInfoPtr info(infoId);
		if (!info)
		{
			WARN_LOG("none iteminfoId exist. [ownerId:%llu, skillInfoId: %u",
				orm->getOwnerId(), infoId);

			continue;
		}

		auto skill = std::make_shared<Skill>(*info);
		orm->copyMember(*skill);

		insertSkill(skill);
	}

	return true;
}

