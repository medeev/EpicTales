

#include "Pch.h"
#include "EnvObjSpawnComponent.h"

#include <Data/Info/EnvObjInfo.h>
#include <Data/Info/WorldInfo.h>
#include <Data/WorldEntityData/WorldEntityData.h>

#include "Room/World.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
EnvObjSpawnComponent::EnvObjSpawnComponent(World& world)
	:
	IComponent(EComponentType::EnvObjSpawn, world, EComponentUpdate::kYes),
	_world(world)
{
	_nextUpdate = world.getTime();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////
EnvObjSpawnComponent::~EnvObjSpawnComponent()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		초기화한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObjSpawnComponent::initialize()
{
	resetSpawnGroup(_world.getInfo().getEnvObjSpawnDatas());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		정리한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObjSpawnComponent::finalize()
{
	_spawners.clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		갱신한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObjSpawnComponent::update(int64_t curTime)
{
	if (curTime < _nextUpdate)
		return;

	_nextUpdate = curTime + 500;

	for (auto& spawner : _spawners)
		spawner->update(curTime);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  특정 스폰그룹으로 리셋한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void EnvObjSpawnComponent::resetSpawnGroup(const std::vector<EnvObjSpawnDataPtr>& envObjSpawnDatas)
{
	_spawners.clear();
	if (envObjSpawnDatas.empty())
		return;


	for (auto& spawnInfo : envObjSpawnDatas)
	{
		EnvObjInfoPtr envObjInfo(spawnInfo->getInfoId());
		ENSURE(envObjInfo, continue);

		EnvObjSpawnerPtr spawner = std::make_shared<EnvObjSpawner>(_world, *spawnInfo, *envObjInfo);
		_spawners.push_back(spawner);
	}

	if (_spawners.size() > 100)
		INFO_LOG("spawner size is : %zd", _spawners.size());
}
