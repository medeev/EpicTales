
#include "Pch.h"
#include "TriggerComponent.h"

#include <Data/Info/NpcInfo.h>

#include "Actor/ActorTypes.h"
#include "Actor/Npc.h"
#include "Room/World.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
TriggerComponent::TriggerComponent(World& world)
	:
	IComponent(EComponentType::Trigger, world, EComponentUpdate::kYes),
	_world(world)
{
	_nextUpdate = world.getTime();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////
TriggerComponent::~TriggerComponent()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		초기화한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void TriggerComponent::initialize()
{
	for (const auto& [key, triggerData] : _world.getInfo().getTriggerDatas())
	{
		if (auto boxData = std::dynamic_pointer_cast<TriggerBoxData>(triggerData))
		{
			auto trigger = std::make_shared<TriggerBox>(_world);
			trigger->init(*boxData);
			_triggers[key] = trigger;
		}
		else if (auto shapeData = std::dynamic_pointer_cast<TriggerSphereData>(triggerData))
		{
			auto trigger = std::make_shared<TriggerSphere>(_world);
			trigger->init(*shapeData);
			_triggers[key] = trigger;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		정리한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void TriggerComponent::finalize()
{
	_triggers.clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief		갱신한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void TriggerComponent::update(int64_t curTime)
{
	if (curTime < _nextUpdate)
		return;

	_nextUpdate = curTime + 500;

	for (const auto& [key, trigger] : _triggers)
		trigger->update();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  찾는다.
////////////////////////////////////////////////////////////////////////////////////////////////////
const TriggerPtr TriggerComponent::find(const std::string& name) const
{
	auto iter = _triggers.find(name);
	return iter == _triggers.end() ? nullptr : iter->second;
}
