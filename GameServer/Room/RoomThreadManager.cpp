


#include "Pch.h"
#include "RoomThreadManager.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		초기화 한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void RoomThreadManager::initialize(uint32_t threadCount)
{
	for (uint32_t i = 1; i <= threadCount; ++i)
		_threads.emplace_back(std::make_shared<RoomThread>(i));

	for (auto thread : _threads)
		thread->start();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief	마무리한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void RoomThreadManager::finalize()
{
	for (auto thread : _threads)
		thread->stop();

	_threads.clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief 한가한 스레드를 반환한다
////////////////////////////////////////////////////////////////////////////////////////////////////
std::shared_ptr<RoomThread> RoomThreadManager::getIdleThread()
{
	std::shared_ptr<RoomThread> idleThread;
	uint32_t minWeight = 0xffffffff;

	for (auto thread : _threads)
	{
		uint32_t weight = thread->getRoomCount();
		if (!idleThread || minWeight > weight)
		{
			idleThread = thread;
			minWeight = weight;
		}
	}

	return idleThread;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ brief		순회한다
////////////////////////////////////////////////////////////////////////////////////////////////////
void RoomThreadManager::forEach(const RoomThread::Callback& callback)
{
	for (auto thread : _threads)
	{
		thread->runTask(
			Caller,
			[thread, callback]()
			{
				thread->forEach(callback);
			});
	}
}
